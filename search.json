[
  
    {
      "title"    : "Numpy深拷贝与视图",
      "subtitle" : "",
      "tags"     : "",
      "url"      : "/2025/07/15/numpy%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E8%A7%86%E5%9B%BE/",
      "date"     : "2025-07-15 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy-数组运算",
      "subtitle" : "",
      "tags"     : "numpy",
      "url"      : "/2025/07/14/numpy%E6%95%B0%E7%BB%84%E8%BF%90%E7%AE%97/",
      "date"     : "2025-07-14 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy初级2-基本操作",
      "subtitle" : "",
      "tags"     : "numpy",
      "url"      : "/2025/07/14/numpy%E5%88%9D%E7%BA%A72/",
      "date"     : "2025-07-14 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy初级1-基本操作",
      "subtitle" : "NumPy 是 Python 的数值计算扩展，提供高效多维数组和掩码数组，支持矩阵运算、随机数生成和数学函数。掩码数组处理缺失数据，np.save 保存单一数组为 .npy 文件，np.savez 保存多数组为压缩 .npz 文件，适合高效存储和加载。",
      "tags"     : "numpy",
      "url"      : "/2025/07/14/numpy%E5%88%9D%E7%BA%A71/",
      "date"     : "2025-07-14 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python爬虫基础02-爬虫开发基础",
      "subtitle" : "HTTP/HTTPS是网络协议，HTTP无状态，HTTPS加密安全。URL是URI子集，包含协议、主机等。爬虫需模拟HTTP请求，处理Cookie和Session，解析JSON数据，分析AJAX动态内容，推荐用Chrome DevTools和requests库。",
      "tags"     : "python爬虫",
      "url"      : "/2025/07/13/python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%8002%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/",
      "date"     : "2025-07-13 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python爬虫基础01-初识爬虫",
      "subtitle" : "数据来源包括互联网、企业、传感器、政府及第三方，广泛应用于商业、科研、治理等。网络爬虫自动抓取互联网信息，分为通用、聚焦等类型。Python因其简洁语法、丰富库、高效开发，成为爬虫首选语言",
      "tags"     : "python爬虫",
      "url"      : "/2025/07/12/python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%8001%E5%88%9D%E5%A7%8B%E7%88%AC%E8%99%AB/",
      "date"     : "2025-07-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-文件操作和目录管理",
      "subtitle" : "字符编码将字符转为二进制，常见格式包括ASCII、Unicode（UTF-8、UTF-16、UTF-32）、GBK等。文件读写通过操作系统句柄、缓冲区操作，支持文本/二进制模式。Python的open()函数、with语句、os模块实现文件和目录操作",
      "tags"     : "python基础",
      "url"      : "/2025/07/12/python%E5%9F%BA%E7%A1%8015%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/",
      "date"     : "2025-07-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "",
      "subtitle" : "",
      "tags"     : "",
      "url"      : "/2025/07/15/2025-07-09-python%E5%9F%BA%E7%A1%8014%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/",
      "date"     : "2025-07-15 06:17:13 +0000"
    } ,
  
    {
      "title"    : "python基础-面向对象编程(2)-练习",
      "subtitle" : "通过Python示例讲解面向对象编程：封装（Person类、TemperatureConverter类使用私有属性和@property 实现数据保护与转换）、继承（Vehicle与Car、SystemMonitor多重继承展示代码重用）、方法重写（Shape子类、Employee与Manager重写方法定制行为）、object类（Vector2D、Product重写特殊方法）和多态（车辆类、PaymentMethod抽象基类实现鸭子类型与接口统一）",
      "tags"     : "python基础",
      "url"      : "/2025/07/09/python%E5%9F%BA%E7%A1%8013%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(2)%E7%BB%83%E4%B9%A0/",
      "date"     : "2025-07-09 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-面向对象编程(2)",
      "subtitle" : "介绍面向对象编程三大特性：封装（数据与方法捆绑，隐藏实现细节，强调高内聚低耦合）、继承（代码重用，子类继承父类属性与方法）、多态（同一接口多种实现，鸭子类型与抽象基类）。通过Python代码示例，展示封装、继承、多态、方法重写、object类及特殊方法与属性",
      "tags"     : "python基础",
      "url"      : "/2025/07/09/python%E5%9F%BA%E7%A1%8013%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(2)/",
      "date"     : "2025-07-09 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-类的浅拷贝和深拷贝",
      "subtitle" : "Python变量赋值与拷贝：赋值操作使变量指向同一对象，修改影响所有引用；浅拷贝复制顶层对象，子对象共享，修改子对象影响原对象；深拷贝递归复制所有对象，源对象与拷贝对象完全独立，互不影响",
      "tags"     : "python基础",
      "url"      : "/2025/07/09/python%E5%9F%BA%E7%A1%8013%E7%B1%BB%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/",
      "date"     : "2025-07-09 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-面向对象编程-练习",
      "subtitle" : "通过习题对比面向过程与面向对象编程，展示类、对象、类属性、实例方法、类方法及静态方法的定义与使用。涵盖列表偶数和计算、书籍与汽车类设计、学生信息管理、圆面积计算及日志记录等Python实现。",
      "tags"     : "python基础",
      "url"      : "/2025/07/03/python%E5%9F%BA%E7%A1%8012%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/",
      "date"     : "2025-07-03 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-面向对象编程",
      "subtitle" : "介绍面向过程与面向对象编程思想，对比其特点、优缺点及适用场景。面向过程以函数为中心，逻辑清晰；面向对象以对象为核心，强调封装、继承、多态、抽象，适合复杂系统。提供Python代码示例，展示类、对象、属性、方法及动态绑定的实现",
      "tags"     : "python基础",
      "url"      : "/2025/07/03/python%E5%9F%BA%E7%A1%8012%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/",
      "date"     : "2025-07-03 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-Bug与异常机制",
      "subtitle" : "“Bug”指程序错误，源于1947年飞蛾卡继电器事件。分类包括语法错误、运行时异常、逻辑错误和环境错误。Python用try-except处理异常，支持捕获特定或全部异常，else和finally块确保逻辑清晰和资源释放。自定义异常和traceback模块增强调试能力",
      "tags"     : "python基础",
      "url"      : "/2025/07/02/python%E5%9F%BA%E7%A1%8011Bug%E4%B8%8E%E5%BC%82%E5%B8%B8/",
      "date"     : "2025-07-02 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-函数",
      "subtitle" : "函数是可复用代码块，通过def定义，调用时执行特定任务。Python函数支持“一等公民”特性，可赋值、传递、嵌套。参数传递为对象引用，需注意可变与不可变对象的不同行为及默认参数陷阱。返回值可单个、多个或None，遵循LEGB作用域规则。递归函数通过基本情况和递归步骤解决问题，需注意性能和栈溢出风险",
      "tags"     : "python基础",
      "url"      : "/2025/07/02/python%E5%9F%BA%E7%A1%8010%E5%87%BD%E6%95%B0/",
      "date"     : "2025-07-02 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-不可变序列-字符串",
      "subtitle" : "Python字符串驻留优化内存和比较效率，短字符串、字面量易驻留，运行时拼接不驻留。常用操作包括查找、替换、分割、连接等，均为不可变操作。比较基于Unicode字典序，切片提取子串，格式化支持%-style、str.format、f-string，编码转换处理Unicode与字节串",
      "tags"     : "python基础",
      "url"      : "/2025/07/01/python%E5%9F%BA%E7%A1%8009%E5%AD%97%E7%AC%A6%E4%B8%B2/",
      "date"     : "2025-07-01 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-元组tuple和集合set",
      "subtitle" : "Python元组是不可变、有序序列，可用小括号或tuple()创建，适合作为字典键。集合是无序、可变、无重复元素的序列，基于哈希表实现，支持高效增删查及集合运算。元组无生成式，集合可用生成式快速创建。",
      "tags"     : "python基础",
      "url"      : "/2025/06/30/python%E5%9F%BA%E7%A1%8008%E5%85%83%E7%BB%84tuple%E5%92%8C%E9%9B%86%E5%90%88set/",
      "date"     : "2025-06-30 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-字典dict",
      "subtitle" : "Python字典是一种基于哈希表的可变、无序键值对数据结构，键唯一且不可变，值可为任意类型。支持快速查找、插入、删除（平均O(1)），可通过花括号、dict()、fromkeys()创建，使用del、clear()、pop()等操作管理元素，字典推导式提供高效构建方式。",
      "tags"     : "python基础",
      "url"      : "/2025/06/30/python%E5%9F%BA%E7%A1%8007%E5%AD%97%E5%85%B8dict/",
      "date"     : "2025-06-30 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-列表list",
      "subtitle" : "Python列表存储对象引用，可存任意类型数据，动态分配内存。支持创建、删除、查询、增删改、排序等操作，索引从0开始，支持负索引和切片。列表推导式提供简洁创建方式，效率高且易读。",
      "tags"     : "python基础",
      "url"      : "/2025/06/26/python%E5%9F%BA%E7%A1%8006%E5%88%97%E8%A1%A8list/",
      "date"     : "2025-06-26 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-流程控制之循环",
      "subtitle" : "range()生成整数序列，支持自定义范围和步长，惰性计算节省内存。while和for-in循环实现重复操作，需注意死循环和迭代对象。break/continue控制循环流，else在无break时执行。嵌套循环需谨慎管理break/continue。",
      "tags"     : "python基础",
      "url"      : "/2025/06/25/python%E5%9F%BA%E7%A1%8005%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/",
      "date"     : "2025-06-25 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-程序结构与条件控制",
      "subtitle" : "1996年证明算法由顺序、选择、循环结构组成。Python顺序结构按顺序执行，对象有布尔值，假值如0、None、空容器。分支结构包括单、双、多分支及嵌套，条件表达式简写if-else，pass占位符用于未完成代码。",
      "tags"     : "python基础",
      "url"      : "/2025/06/25/python%E5%9F%BA%E7%A1%8004%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/",
      "date"     : "2025-06-25 00:00:00 +0000"
    } ,
  
    {
      "title"    : "python基础-输入函数与运算符及其优先级",
      "subtitle" : "Python的input()函数获取字符串输入，需通过int()或float()转换类型。运算符包括算术、赋值、比较、布尔和位运算；and/or支持短路求值，&amp;/|不短路；==比较值，is比较内存地址；运算符优先级依次为算术、位、比较、布尔、赋值。",
      "tags"     : "python基础",
      "url"      : "/2025/06/25/python%E5%9F%BA%E7%A1%8003%E8%BE%93%E5%85%A5%E5%87%BD%E6%95%B0%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%8A%E5%85%B6%E4%BC%98%E5%85%88%E7%BA%A7/",
      "date"     : "2025-06-25 00:00:00 +0000"
    } ,
  
    {
      "title"    : "字符编码与Python变量、数据类型和注释",
      "subtitle" : "计算机以二进制为基础，通过ASCII、GB2312、GBK、GB18030、Unicode及UTF-8实现字符显示。Python中，保留字不可用作标识符，变量为引用，数据类型包括int、float、bool、str，需注意类型转换与浮点精度。注释增强代码可读性。",
      "tags"     : "python基础",
      "url"      : "/2025/06/25/python%E5%9F%BA%E7%A1%8002%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E4%B8%8EPython%E5%8F%98%E9%87%8F-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%B3%A8%E9%87%8A/",
      "date"     : "2025-06-25 00:00:00 +0000"
    } ,
  
    {
      "title"    : "设计模式概述",
      "subtitle" : "本博客介绍了代码质量的7个评价标准（可维护性、可扩展性等），阐述了面向对象、设计原则、设计模式、编程规范和重构的编程方法论，重点概述了GoF的23种设计模式及其分类（创建型、结构型、行为型），并强调学习设计模式对提升开发效率的重要性。",
      "tags"     : "23种设计模式",
      "url"      : "/2025/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F01%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/",
      "date"     : "2025-06-24 00:00:00 +0000"
    } ,
  
    {
      "title"    : "print函数与转义字符",
      "subtitle" : "本博客介绍了Python由Guido van Rossum创建，适用于AI、爬虫等领域的特性及开发环境搭建（如PyCharm配置）。内容涵盖print()输出、转义字符、文件操作，并通过任务展示天气预报、机票购买和地铁1号线运行图的代码实现。",
      "tags"     : "python基础",
      "url"      : "/2025/06/24/python%E5%9F%BA%E7%A1%8001print%E5%87%BD%E6%95%B0%E4%B8%8E%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/",
      "date"     : "2025-06-24 00:00:00 +0000"
    } ,
  
    {
      "title"    : "Spring 6 IOC 入门与自定义容器模拟实现",
      "subtitle" : "博客通过一个 Spring IOC 入门案例展示如何使用 Spring 6.2.8 创建并管理 Person 对象，解析 XML 配置，并模拟 Spring 容器实现 IOC/DI 功能。使用 dom4j 解析类路径 XML 文件，通过反射实例化对象并存储到 Map。",
      "tags"     : "spring6",
      "url"      : "/2025/06/23/spring03IOC%E5%85%A5%E9%97%A8%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/",
      "date"     : "2025-06-23 00:00:00 +0000"
    } ,
  
    {
      "title"    : "spring6-IOC/DI的引入与开发环境的准备",
      "subtitle" : "Spring 6 是一个轻量级开源框架，基于 JDK 17 和 Jakarta EE 9+，以 IoC/DI 和 AOP 为核心，管理 Bean 生命周期和依赖关系，提供事务、AOP 等模块。本篇聚焦 IoC/DI，介绍其概念、优势及开发环境搭建。",
      "tags"     : "spring6",
      "url"      : "/2025/06/12/spring02%E4%B9%8BIOC%E7%9A%84%E5%BC%95%E5%85%A5%E4%B8%8E%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/",
      "date"     : "2025-06-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "spring6-基础",
      "subtitle" : "Spring框架是一个轻量级、开源的Java EE全栈框架，以IoC/DI和AOP为核心，消除样板代码，实现松耦合，简化事务管理和横切关注点处理。其模块化生态系统整合多种技术，支持云原生、响应式编程等现代开发需求，大幅提升开发效率、可维护性和扩展性。",
      "tags"     : "spring6",
      "url"      : "/2025/06/12/spring01%E5%9F%BA%E7%A1%80/",
      "date"     : "2025-06-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "jvm-class文件格式",
      "subtitle" : "在学习jvm的各种内容之前应该简单了解下class文件的格式。",
      "tags"     : "jvm",
      "url"      : "/2025/06/05/classfileformat/",
      "date"     : "2025-06-05 00:00:00 +0000"
    } ,
  
    {
      "title"    : "java闭包",
      "subtitle" : "闭包是JavaScript和Java中重要的概念，指函数或Lambda捕获外部作用域变量。JavaScript通过内部函数访问局部变量形成闭包；Java中，Lambda或匿名类捕获final变量实现闭包，动态绑定状态，增强函数式编程灵活性。",
      "tags"     : "java基础",
      "url"      : "/2025/05/12/Java%E9%97%AD%E5%8C%85/",
      "date"     : "2025-05-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "ollama工具-自定义模型",
      "subtitle" : "这篇博客介绍了如何使用Ollama的Modelfile定制化模型。通过在Modelfile中指定基础模型、调整temperature等参数和设置SYSTEM系统提示，可以使用ollama create命令创建个性化的模型，然后运行交互。",
      "tags"     : "ollama工具",
      "url"      : "/2025/04/07/Ollama%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B/",
      "date"     : "2025-04-07 00:00:00 +0000"
    } ,
  
    {
      "title"    : "ollama工具-下载安装快速上手",
      "subtitle" : "介绍本地大模型运行器Ollama，说明了如何安装、通过命令行下载并运行Gemma等模型进行交互，以及如何列出、删除模型。还演示了直接提问、查看效率和使用llava分析图片功能",
      "tags"     : "ollama工具",
      "url"      : "/2025/04/07/Ollama%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/",
      "date"     : "2025-04-07 00:00:00 +0000"
    } ,
  
    {
      "title"    : "026 哈希表，有序表和比较器的用法",
      "subtitle" : "哈希表(集)：O(1)操作依赖hashCode/equals；有序表(集)：O(log n)操作依赖比较器维护顺序。介绍根据值/地址作键、数组替代哈希表场景、比较器定制和字典序概念。",
      "tags"     : "算法",
      "url"      : "/2025/04/06/%E7%AE%97%E6%B3%95026/",
      "date"     : "2025-04-06 00:00:00 +0000"
    } ,
  
    {
      "title"    : "java基础(2) 实现hashCode方法的通用约定",
      "subtitle" : "hashCode的通用约定确保哈希表等数据结构能正确运行：首先，如果两个对象通过equals方法比较是相等的，它们的hashCode必须相同；其次，只要用于equals比较的对象信息未变，单次程序运行中同一对象的hashCode必须保持一致；最后，虽然不强制要求，但为了提高性能，不相等的对象应尽量产生不同的hashCode以减少哈希冲突。",
      "tags"     : "Java基础",
      "url"      : "/2025/04/06/%E5%AE%9E%E7%8E%B0hashCode%E6%96%B9%E6%B3%95%E7%9A%84%E9%80%9A%E7%94%A8%E7%BA%A6%E5%AE%9A/",
      "date"     : "2025-04-06 00:00:00 +0000"
    } ,
  
    {
      "title"    : "025 堆结构与堆排序",
      "subtitle" : "堆是数组实现的完全二叉树，核心操作为向上(heapInsert)和向下(heapify)调整(O(log n))。堆排序先建堆（O(n)或O(n log n)），再交换堆顶并调整。整体时间复杂度O(n log n)，空间O(1)。堆结构本身比堆排序更有用。",
      "tags"     : "算法",
      "url"      : "/2025/04/05/%E7%AE%97%E6%B3%95025/",
      "date"     : "2025-04-05 00:00:00 +0000"
    } ,
  
    {
      "title"    : "力扣2607 使子数组元素和相等",
      "subtitle" : "优化",
      "tags"     : "力扣",
      "url"      : "/2025/04/01/%E5%8A%9B%E6%89%A3%E4%BC%98%E5%8C%962607/",
      "date"     : "2025-04-01 00:00:00 +0000"
    } ,
  
    {
      "title"    : "024 随机选择算法，BFPRT算法",
      "subtitle" : "本博客讲解了在无序数组中寻找第K大元素的两种方法：随机选择算法和BFPRT算法。随机选择算法基于快排思想，期望时间复杂度为O(n)，但证明较复杂。BFPRT算法通过选取“中位数的中位数”作为pivot，保证最坏情况下时间复杂度也为O(n)，但实现稍复杂。博客提供了两种算法的Java代码，并强调BFPRT算法的意义在于其规避最坏情况，优化算法的思想。",
      "tags"     : "算法",
      "url"      : "/2025/03/30/%E7%AE%97%E6%B3%95024/",
      "date"     : "2025-03-30 00:00:00 +0000"
    } ,
  
    {
      "title"    : "018 二叉树遍历的非递归方法和复杂度分析",
      "subtitle" : "本文总结了用栈实现二叉树的三种遍历方式：先序、中序和后序。先序遍历用栈记录节点，先压右子节点再压左子节点。中序遍历利用栈模拟递归，访问左子树为空的节点。后序遍历可用两个栈（易理解，空间O(n)）或一个栈（空间O(h)，更复杂）实现。 遍历的时间复杂度为O(n)，空间复杂度通常为O(h)，Morris遍历可实现O(1)空间复杂度。",
      "tags"     : "算法",
      "url"      : "/2025/03/29/%E7%AE%97%E6%B3%95018/",
      "date"     : "2025-03-29 00:00:00 +0000"
    } ,
  
    {
      "title"    : "016 双端队列-力扣641-双链表和固定数组实现",
      "subtitle" : "这篇博客介绍了循环双端队列的2种实现方式：双链表LinkedList和固定数组。双链表(自己实现)实现速度较快，但需手动编写节点类；LinkedList实现简单，但效率稍逊；固定数组实现适用于已知队列大小上限的情况，通过取模运算或等价逻辑循环利用数组空间。选择哪种实现取决于具体需求和性能考量。",
      "tags"     : "算法",
      "url"      : "/2025/03/26/%E7%AE%97%E6%B3%95016/",
      "date"     : "2025-03-26 00:00:00 +0000"
    } ,
  
    {
      "title"    : "015 最小栈-力扣155",
      "subtitle" : "实现常数时间获取最小值的栈（MinStack）。主流方法是维护一个辅助栈记录每个位置的最小值，保证getMin()的O(1)复杂度。文章展示了基于Java内置栈、数组以及单链表三种实现方式，链表解法每个节点额外存储当前最小值。",
      "tags"     : "算法",
      "url"      : "/2025/03/25/%E7%AE%97%E6%B3%95015/",
      "date"     : "2025-03-25 00:00:00 +0000"
    } ,
  
    {
      "title"    : "014【入门】队列和栈入门题目-栈和队列相互实现",
      "subtitle" : "本篇介绍了如何用栈模拟队列（均摊O(1)）和用队列模拟栈。栈模拟队列使用双栈倒数据，需注意倒数据时机和完整性。队列模拟栈，可用双队列或单队列实现，单队列每次push时需将之前元素重排。双端队列ArrayDeque也可高效实现栈。",
      "tags"     : "算法",
      "url"      : "/2025/03/25/%E7%AE%97%E6%B3%95014/",
      "date"     : "2025-03-25 00:00:00 +0000"
    } ,
  
    {
      "title"    : "013【入门】队列和栈-链表、数组实现",
      "subtitle" : "本博客介绍了队列和栈的基本概念及其链表和数组实现。队列遵循先进先出（FIFO）原则，而栈遵循后进先出（LIFO）原则。重点讲解了数组实现队列时环形队列的设计，以及栈和队列的常见操作。最后通过力扣622题展示了环形队列的实际应用和解法。",
      "tags"     : "算法",
      "url"      : "/2025/03/25/%E7%AE%97%E6%B3%95013/",
      "date"     : "2025-03-25 00:00:00 +0000"
    } ,
  
    {
      "title"    : "012 链表入门题目-划分链表-哑节点",
      "subtitle" : "此博客讲解了链表分隔(力扣86)：将链表按给定值x分成小于x和大于等于x两部分，保持原相对顺序。核心是用两个哑节点分别指向两部分链表头，遍历原链表并按节点值连接到对应哑节点后，拼接两链表。补充题是力扣328-奇偶链表，思路类似。",
      "tags"     : "算法",
      "url"      : "/2025/03/21/%E7%AE%97%E6%B3%95012/",
      "date"     : "2025-03-21 00:00:00 +0000"
    } ,
  
    {
      "title"    : "011 链表入门题目-两个链表相加",
      "subtitle" : "本博客讲解了力扣2.两数相加，用链表逆序存储非负整数，并返回它们的和（链表形式）。解题思路是模拟手算加法，处理进位。代码部分提供了Java实现。此外，博客还补充了力扣67.二进制求和，思路类似。",
      "tags"     : "算法",
      "url"      : "/2025/03/21/%E7%AE%97%E6%B3%95011/",
      "date"     : "2025-03-21 00:00:00 +0000"
    } ,
  
    {
      "title"    : "010 链表入门题-力扣21-合并两个升序链表",
      "subtitle" : "这篇博客讲解了如何合并两个升序链表（LeetCode 21）。提供了递归和非递归两种解法。递归解法简洁，通过比较头节点大小，递归合并剩余部分。非递归解法则通过迭代，使用 pre 指针连接较小节点，最终合并两个链表。链表题能有效考察编码能力。",
      "tags"     : "算法",
      "url"      : "/2025/03/20/%E7%AE%97%E6%B3%95010/",
      "date"     : "2025-03-20 00:00:00 +0000"
    } ,
  
    {
      "title"    : "009 单双链表及其反转-堆栈诠释",
      "subtitle" : "这篇博客主要讲解链表相关知识，首先强调了按值传递与按引用传递的区别。然后介绍了单链表和双链表的定义，并重点通过 LeetCode 206和92 题详细讲解了链表反转的迭代解法，展示了使用指针调整链表结构的思路，最后给出了双链表反转的迭代代码。作者认为链表题是检验编码能力的重要手段。",
      "tags"     : "算法",
      "url"      : "/2025/03/20/%E7%AE%97%E6%B3%95009/",
      "date"     : "2025-03-20 00:00:00 +0000"
    } ,
  
    {
      "title"    : "023 随机快速排序",
      "subtitle" : "经典随机快速排序和用荷兰国旗问题优化后的随机快速排序。经典快排易受重复元素影响，优化后的版本通过荷兰国旗问题将数组划分为小于、等于、大于x三部分，提升效率。文章分析了普通快排和随机快排在不同情况下的时间和空间复杂度，强调随机选择的重要性，并指出随机快排的期望时间复杂度为O(n log n)，空间复杂度为O(log n)。",
      "tags"     : "算法",
      "url"      : "/2025/03/19/%E7%AE%97%E6%B3%95023/",
      "date"     : "2025-03-19 00:00:00 +0000"
    } ,
  
    {
      "title"    : "008 数据结构和算法 简介",
      "subtitle" : "左老师将算法分为硬计算（精确求解，复杂度可能高，程序员必备，面试常考）和软计算（逼近求解，时间可控，算法工程师需要）两类。数据结构则宏观地分为连续结构和跳转结构，所有数据结构都是这两者的组合。",
      "tags"     : "算法",
      "url"      : "/2025/03/18/%E7%AE%97%E6%B3%95008/",
      "date"     : "2025-03-18 00:00:00 +0000"
    } ,
  
    {
      "title"    : "java基础(1) 按值传递",
      "subtitle" : "Java 采用按值传递，方法接收的是实参值的副本。基本类型传递值的副本，引用类型传递对象地址的副本。方法内修改对象会影响原始对象，但重新赋值引用不会。可理解为“按引用传递”传递地址副本，但Java始终传递的是值的副本。设计目的是规避C/C++指针的复杂性，利于工程开发。",
      "tags"     : "Java基础",
      "url"      : "/2025/03/18/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8E%E6%8C%89%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/",
      "date"     : "2025-03-18 00:00:00 +0000"
    } ,
  
    {
      "title"    : "007 时间复杂度和空间复杂度",
      "subtitle" : "算法分析与设计的关键概念，包括时间/空间复杂度、常数时间操作、均摊分析，以及递归与分治策略。特别强调了不能仅凭代码结构判断时间复杂度，需理解算法本质。覆盖了二进制运算、排序算法、KMP算法等，适合算法初学者。",
      "tags"     : "算法",
      "url"      : "/2025/03/17/%E7%AE%97%E6%B3%95007/",
      "date"     : "2025-03-17 00:00:00 +0000"
    } ,
  
    {
      "title"    : "022 归并分治",
      "subtitle" : "归并分治将问题分解为左右子问题及跨越左右的答案。若左右有序能简化跨越部分计算，则适合归并分治。解题时融入归并排序保证左右有序。牛客小和累积和与力扣493翻转对是典型例题，关键在于高效统计跨越左右的答案。归并分治也可用线段树等解决，并能处理更复杂问题。",
      "tags"     : "算法",
      "url"      : "/2025/03/16/022%E5%BD%92%E5%B9%B6%E5%88%86%E6%B2%BB/",
      "date"     : "2025-03-16 00:00:00 +0000"
    } ,
  
    {
      "title"    : "021 归并排序merge sort",
      "subtitle" : "归并排序通过递归或非递归方式，将数组分为有序左右两部分，再利用merge过程整体排序。Merge过程比较左右元素，小的放入辅助数组并拷贝回原数组。时间复杂度O(n log n)，空间复杂度O(n)。 归并排序效率高于O(n^2)排序，因为比较行为不浪费。可用于解决力扣912题，需用静态辅助数组。",
      "tags"     : "算法",
      "url"      : "/2025/03/16/021%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/",
      "date"     : "2025-03-16 00:00:00 +0000"
    } ,
  
    {
      "title"    : "020 递归和master公式",
      "subtitle" : "递归需画图辅助理解，底层用系统栈实现。任何递归可转非递归，工程上常需避免栈溢出。Master公式适用于子问题规模相同的递归，根据log(b,a)与c关系判断复杂度。特例T(n) = 2*T(n/2) + O(n*logn)复杂度为O(n * (logn)^2)。",
      "tags"     : "算法",
      "url"      : "/2025/03/15/%E9%80%92%E5%BD%92%E5%92%8Cmaster%E5%85%AC%E5%BC%8F/",
      "date"     : "2025-03-15 00:00:00 +0000"
    } ,
  
    {
      "title"    : "算法笔试中处理输入与输出",
      "subtitle" : "有填函数（框架处理I/O）和ACM风格（需自行处理I/O）两种。ACM推荐使用BufferedReader/PrintWriter等高效I/O类，避免Scanner/System.out。不推荐临时动态空间，优先使用全局静态空间预分配内存。Kattio和FastReader/Writer可处理特殊情况，但StreamTokenizer效率更高。",
      "tags"     : "算法",
      "url"      : "/2025/03/15/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AF%95%E4%B8%AD%E5%A4%84%E7%90%86%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/",
      "date"     : "2025-03-15 00:00:00 +0000"
    } ,
  
    {
      "title"    : "041 最大公约数 最小公倍数 同余原理",
      "subtitle" : "力扣 878: 第 N 个神奇数字，同余原理，这是处理大数运算的重要工具",
      "tags"     : "算法",
      "url"      : "/2025/03/14/%E7%AE%97%E6%B3%95041/",
      "date"     : "2025-03-14 00:00:00 +0000"
    } ,
  
    {
      "title"    : "017 二叉树及其三种序的递归实现",
      "subtitle" : "二叉树及其三种序(先中后)的递归实现",
      "tags"     : "算法",
      "url"      : "/2025/03/14/%E7%AE%97%E6%B3%95017/",
      "date"     : "2025-03-14 00:00:00 +0000"
    } ,
  
    {
      "title"    : "摩尔投票算法 力扣169，229，1150，2404",
      "subtitle" : "力扣169，229，1150，2404",
      "tags"     : "力扣",
      "url"      : "/2025/03/13/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95/",
      "date"     : "2025-03-13 00:00:00 +0000"
    } ,
  
    {
      "title"    : "三段逆置 力扣189 轮转数组",
      "subtitle" : "力扣189 轮转数组",
      "tags"     : "力扣",
      "url"      : "/2025/03/13/%E5%8A%9B%E6%89%A3189-%E4%B8%89%E6%AE%B5%E9%80%86%E7%BD%AE/",
      "date"     : "2025-03-13 00:00:00 +0000"
    } ,
  
    {
      "title"    : "力扣 88. 合并两个有序数组",
      "subtitle" : "88. 合并两个有序数组",
      "tags"     : "力扣",
      "url"      : "/2025/03/08/leetcode-week1/",
      "date"     : "2025-03-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "力扣 27. 移除元素 26. 删除有序数组中的重复项 80. 删除有序数组中的重复项 II",
      "subtitle" : "3道题：27. 移除元素  26. 删除有序数组中的重复项 80. 删除有序数组中的重复项 II",
      "tags"     : "力扣",
      "url"      : "/2025/03/12/%E5%8A%9B%E6%89%A327/",
      "date"     : "2025-03-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "力扣 229. 多数元素 II(摩尔投票算法)",
      "subtitle" : "229. 多数元素 II",
      "tags"     : "力扣",
      "url"      : "/2025/03/12/%E5%8A%9B%E6%89%A3229/",
      "date"     : "2025-03-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "力扣 169. 多数元素(摩尔投票算法)",
      "subtitle" : "169. 多数元素",
      "tags"     : "力扣",
      "url"      : "/2025/03/12/%E5%8A%9B%E6%89%A3169%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95/",
      "date"     : "2025-03-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "利用numpy对图像进行操作",
      "subtitle" : "NumPy 提供了强大的数组操作功能，Matplotlib 提供了图像读取和显示的功能，两者结合可以实现图像的翻转、颜色变换、降采样和打马赛克等效果。",
      "tags"     : "numpy",
      "url"      : "/2025/03/12/%E5%88%A9%E7%94%A8numpy%E5%AF%B9%E5%9B%BE%E5%83%8F%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/",
      "date"     : "2025-03-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy 19道练习题",
      "subtitle" : "比较简单",
      "tags"     : "numpy",
      "url"      : "/2025/03/12/numpy19%E9%A2%98/",
      "date"     : "2025-03-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "100  KMP算法原理和代码详解",
      "subtitle" : "KMP 算法，一种时间复杂度为 O(n+m) 的高效算法。 文章从 next 数组的定义入手，逐步讲解 KMP 算法的匹配原理、next 数组的快速生成方法，并通过代码示例和复杂度分析，帮助读者彻底理解 KMP 算法的精髓。 此外，还展示了 KMP 算法在 LeetCode 题目中的应用，以及与 Java 内置 indexOf 方法的性能对比。 除了KMP算法，还展示了“另一棵树的子树”的题目，如何使用暴力递归方式解决。",
      "tags"     : "算法",
      "url"      : "/2025/03/10/100KMP%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%92%8C%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/",
      "date"     : "2025-03-10 00:00:00 +0000"
    } ,
  
    {
      "title"    : "三月 0302～0308 力扣算法练习总结",
      "subtitle" : "题号 :1，9，13，14，162，20，21，26，27，28，35，58，66，67",
      "tags"     : "力扣",
      "url"      : "/2025/03/08/leetcode-week1/",
      "date"     : "2025-03-08 00:00:00 +0000"
    } ,
  
    {
      "title"    : "006  二分搜索",
      "subtitle" : "在有序数组中查找特定元素是否存在、寻找大于等于某数的最左位置、小于等于某数的最右位置，以及在无序但相邻不相等的数组中寻找峰值（力扣162） 。",
      "tags"     : "算法",
      "url"      : "/2025/03/07/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A82-%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/",
      "date"     : "2025-03-07 00:00:00 +0000"
    } ,
  
    {
      "title"    : "003~005 二进制和位运算，三傻排序算法，对数器",
      "subtitle" : "常见位运算的原理，正数和负数在计算机中如何用二进制表示，及互相转换方法，计算机不会自动处理溢出。冒泡、选择、插入排序的思路及代码。对数器的概念和实现，用于验证算法正确性，特别是没有在线测试环境时。包括如何生成随机数据、编写暴力解、比较结果等。",
      "tags"     : "算法",
      "url"      : "/2025/03/05/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A81/",
      "date"     : "2025-03-05 00:00:00 +0000"
    } ,
  
    {
      "title"    : "week1-2练习题及答案",
      "subtitle" : "单变量线性回归，线性代数，多元线性回归，Octave练习",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/04/%E5%90%B4%E6%81%A9%E8%BE%BEexer1/",
      "date"     : "2025-03-04 00:00:00 +0000"
    } ,
  
    {
      "title"    : "4 多变量线性回归Linear Regression with Multiple Variables",
      "subtitle" : "梯度下降应用于多变量，特征缩放，多项式回归，正规方程及其不可逆性",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/04/%E5%90%B4%E6%81%A9%E8%BE%BEML4/",
      "date"     : "2025-03-04 00:00:00 +0000"
    } ,
  
    {
      "title"    : "Oracle(1) 安装与配置，基本概念",
      "subtitle" : "安装(docker拉取镜像)与配置，基本概念等",
      "tags"     : "Oracle",
      "url"      : "/2025/03/04/oracle1/",
      "date"     : "2025-03-04 00:00:00 +0000"
    } ,
  
    {
      "title"    : "3 线性代数回顾",
      "subtitle" : "矩阵，向量，矩阵乘法，矩阵求逆转置（我补充了利用Numpy和Pandas进行运算的方法）",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/03/%E5%90%B4%E6%81%A9%E8%BE%BEML3/",
      "date"     : "2025-03-03 00:00:00 +0000"
    } ,
  
    {
      "title"    : "2-7 线性回归的梯度下降",
      "subtitle" : "线性回归问题运用梯度下降法（求偏导）",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/03/%E5%90%B4%E6%81%A9%E8%BE%BEML2-7/",
      "date"     : "2025-03-03 00:00:00 +0000"
    } ,
  
    {
      "title"    : "2-6 梯度下降知识点总结",
      "subtitle" : "导数项、学习率的直观理解",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/03/%E5%90%B4%E6%81%A9%E8%BE%BEML2-6/",
      "date"     : "2025-03-03 00:00:00 +0000"
    } ,
  
    {
      "title"    : "力扣 30天pandas挑战",
      "subtitle" : "33题  题目+测试数据+完成挑战",
      "tags"     : "力扣",
      "url"      : "/2025/03/03/%E5%8A%9B%E6%89%A3-30%E5%A4%A9Pandas%E6%8C%91%E6%88%98/",
      "date"     : "2025-03-03 00:00:00 +0000"
    } ,
  
    {
      "title"    : "2-5 梯度下降  Gradient Descent",
      "subtitle" : "梯度下降的数学原理",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/02/%E5%90%B4%E6%81%A9%E8%BE%BEML2-5/",
      "date"     : "2025-03-02 00:00:00 +0000"
    } ,
  
    {
      "title"    : "2-2 代价函数Cost Function",
      "subtitle" : "代价函数的数学定义、代价函数的直观理解",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/02/%E5%90%B4%E6%81%A9%E8%BE%BEML2-2to2-4/",
      "date"     : "2025-03-02 00:00:00 +0000"
    } ,
  
    {
      "title"    : "2-1 模型描述",
      "subtitle" : "如何描述一个模型，单变量线性回归是什么",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/02/%E5%90%B4%E6%81%A9%E8%BE%BEML2-1/",
      "date"     : "2025-03-02 00:00:00 +0000"
    } ,
  
    {
      "title"    : "1-4 非监督学习",
      "subtitle" : "什么是无监督学习、无监督学习分类（聚类，信号分离）",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/02/%E5%90%B4%E6%81%A9%E8%BE%BEML1-4%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/",
      "date"     : "2025-03-02 00:00:00 +0000"
    } ,
  
    {
      "title"    : "1-2 什么是机器学习",
      "subtitle" : "什么是机器学习、机器学习的分类",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/01/%E5%90%B4%E6%81%A9%E8%BE%BEML1-2/",
      "date"     : "2025-03-01 00:00:00 +0000"
    } ,
  
    {
      "title"    : "1-1 欢迎参加《机器学习》课程",
      "subtitle" : "机器学习简介/例子",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/01/%E5%90%B4%E6%81%A9%E8%BE%BEML1-1/",
      "date"     : "2025-03-01 00:00:00 +0000"
    } ,
  
    {
      "title"    : "1-3 监督学习Supervised Learning",
      "subtitle" : "监督学习的定义、分类（回归与分类）",
      "tags"     : "机器学习-吴恩达",
      "url"      : "/2025/03/01/%E5%90%B4%E6%81%A9%E8%BE%BE1-3/",
      "date"     : "2025-03-01 00:00:00 +0000"
    } ,
  
    {
      "title"    : "df长宽变形大师 - melt的重塑神功",
      "subtitle" : "pandas重塑函数-melt的介绍与练习",
      "tags"     : "pandas",
      "url"      : "/2025/02/28/%E8%BD%AC%E6%8D%A2%E4%B8%8E%E9%87%8D%E5%A1%91df-melt%E5%87%BD%E6%95%B0/",
      "date"     : "2025-02-28 00:00:00 +0000"
    } ,
  
    {
      "title"    : "pandas超级重要函数-transform函数",
      "subtitle" : "返回与输入组具有相同形状的结果的transform函数",
      "tags"     : "pandas",
      "url"      : "/2025/02/28/pandas%E9%87%8D%E8%A6%81%E5%87%BD%E6%95%B0transform/",
      "date"     : "2025-02-28 00:00:00 +0000"
    } ,
  
    {
      "title"    : "pandas入门15题",
      "subtitle" : "pandas入门15题",
      "tags"     : "力扣",
      "url"      : "/2025/02/25/%E5%8A%9B%E6%89%A3pandas%E5%85%A5%E9%97%A815%E9%A2%98/",
      "date"     : "2025-02-25 00:00:00 +0000"
    } ,
  
    {
      "title"    : "pandas(4)大数据处理技巧",
      "subtitle" : "pandas 第四部分：大数据处理技巧",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/25/Pandas(4)%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%8A%80%E5%B7%A7/",
      "date"     : "2025-02-25 00:00:00 +0000"
    } ,
  
    {
      "title"    : "pandas(3)常用函数操作",
      "subtitle" : "pandas 第三部分：常用函数操作",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/24/pandas(3)%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%93%8D%E4%BD%9C/",
      "date"     : "2025-02-24 00:00:00 +0000"
    } ,
  
    {
      "title"    : "pandas(2)数据分析",
      "subtitle" : "pandas 第二部分：数据分析",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/24/Pandas(2)%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/",
      "date"     : "2025-02-24 00:00:00 +0000"
    } ,
  
    {
      "title"    : "pandas(1)数据预处理",
      "subtitle" : "pandas 第一部分：数据预处理",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/21/Pandas(1)%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/",
      "date"     : "2025-02-21 00:00:00 +0000"
    } ,
  
    {
      "title"    : "NumPy 70题",
      "subtitle" : "NumPy 70道习题（题目+答案）",
      "tags"     : "面试习题",
      "url"      : "/2025/02/21/NumPy70%E9%A2%98/",
      "date"     : "2025-02-21 00:00:00 +0000"
    } ,
  
    {
      "title"    : "NumPy学习指南（第2版）阅读总结",
      "subtitle" : "一共11章，代码，笔记，齐全",
      "tags"     : "书籍阅读",
      "url"      : "/2025/02/14/NumPy%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97(%E7%AC%AC2%E7%89%88)%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/",
      "date"     : "2025-02-14 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(11)玩转 Pygame",
      "subtitle" : "第 11 章 玩转 Pygame",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/14/NumPy(11)%E7%8E%A9%E8%BD%ACPygame/",
      "date"     : "2025-02-14 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(10)NumPy的扩展：SciPy",
      "subtitle" : "第 10 章 NumPy 的扩展：SciPy",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/14/NumPy(10)NumPy%E7%9A%84%E6%89%A9%E5%B1%95-SciPy/",
      "date"     : "2025-02-14 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(9)使用Matplotlib绘图",
      "subtitle" : "第 9 章 使用Matplotlib绘图",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/12/NumPy(9)%E4%BD%BF%E7%94%A8Matplotlib%E7%BB%98%E5%9B%BE/",
      "date"     : "2025-02-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(8)质量控制",
      "subtitle" : "第 8 章 质量控制",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/12/NumPy(8)%E8%B4%A8%E9%87%8F%E6%8E%A7%E5%88%B6/",
      "date"     : "2025-02-12 00:00:00 +0000"
    } ,
  
    {
      "title"    : "读图片-jupyter notebook",
      "subtitle" : "三种方式+图像简单操作",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/11/jupyter-notebook-%E8%AF%BB%E5%9B%BE%E7%89%87/",
      "date"     : "2025-02-11 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(7)专用函数",
      "subtitle" : "第 7 章 专用函数",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/10/NumPy(7)%E4%B8%93%E7%94%A8%E5%87%BD%E6%95%B0/",
      "date"     : "2025-02-10 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(6)深入学习NumPy模块",
      "subtitle" : "第 6 章 深入学习NumPy模块",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/09/NumPy(6)%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0NumPy%E6%A8%A1%E5%9D%97/",
      "date"     : "2025-02-09 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(5)矩阵和通用函数",
      "subtitle" : "第 5 章 NumPy矩阵和通用函数",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/09/NumPy(5)%E7%9F%A9%E9%98%B5%E5%92%8C%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0/",
      "date"     : "2025-02-09 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(4)便捷函数",
      "subtitle" : "第 4 章 NumPy便捷函数",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/07/NumPy(4)%E4%BE%BF%E6%8D%B7%E5%87%BD%E6%95%B0/",
      "date"     : "2025-02-07 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(3)常用函数",
      "subtitle" : "第 3 章 NumPy常用函数",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/06/Numpy(3)%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/",
      "date"     : "2025-02-06 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(2)_numpy基础",
      "subtitle" : "第 2 章 NumPy基础",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/04/numpy(2)_numpy%E5%9F%BA%E7%A1%80/",
      "date"     : "2025-02-04 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy的广播和广播机制",
      "subtitle" : "NumPy的广播机制和重要，在机器学习、深度学习里的tensorflow和keras里使用了大量的广播计算，需深入理解广播机制。",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/02/04/Numpy%E7%9A%84%E5%B9%BF%E6%92%AD%E5%92%8C%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6/",
      "date"     : "2025-02-04 00:00:00 +0000"
    } ,
  
    {
      "title"    : "MATHEMATICS FOR MACHINE LEARNING第二章 2.1~2.3 阅读笔记",
      "subtitle" : "chap2 Linear Algebra 2.1~2.3",
      "tags"     : "书籍阅读",
      "url"      : "/2025/02/01/MATHEMATICS-FOR-ML-chap2-2.1%E8%87%B32.3/",
      "date"     : "2025-02-01 00:00:00 +0000"
    } ,
  
    {
      "title"    : "numpy(1)_入门",
      "subtitle" : "1 NumPy快速入门-安装 2 体验NumPy中的数组对象",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/01/27/numpy(1)_%E5%85%A5%E9%97%A8/",
      "date"     : "2025-01-27 00:00:00 +0000"
    } ,
  
    {
      "title"    : "IPython学习笔记",
      "subtitle" : "IPython学习-魔法命令、高级功能",
      "tags"     : "人工智能AI基础",
      "url"      : "/2025/01/27/IPython/",
      "date"     : "2025-01-27 00:00:00 +0000"
    } ,
  
    {
      "title"    : "编译原理-测试",
      "subtitle" : "编译原理-&gt;中科大学习",
      "tags"     : "编译原理",
      "url"      : "/2025/01/24/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E4%B8%AD%E7%A7%91%E5%A4%A7/",
      "date"     : "2025-01-24 00:00:00 +0000"
    } ,
  
    {
      "title"    : "go基础",
      "subtitle" : "go基础01-go简介+hello world",
      "tags"     : "go基础",
      "url"      : "/2024/09/15/go/",
      "date"     : "2024-09-15 00:00:00 +0000"
    } ,
  
    {
      "title"    : "书籍阅读-Python灰帽子–黑客与逆向工程师的Python编程之道",
      "subtitle" : "Python灰帽子–黑客与逆向工程师的Python编程之道",
      "tags"     : "书籍阅读",
      "url"      : "/2024/05/26/Python%E7%81%B0%E5%B8%BD%E5%AD%90-%E9%BB%91%E5%AE%A2%E4%B8%8E%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84Python%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B01/",
      "date"     : "2024-05-26 00:00:00 +0000"
    } ,
  
    {
      "title"    : "Burpsuite",
      "subtitle" : "Repeater模块无法返回response",
      "tags"     : "Burpsuite",
      "url"      : "/2024/05/26/burpsuite/",
      "date"     : "2024-05-26 00:00:00 +0000"
    } ,
  
    {
      "title"    : "手写Spring_篇章1",
      "subtitle" : "如何扫描+获取Bean(原型还是单例)",
      "tags"     : "手写Spring",
      "url"      : "/2024/04/15/spring_%E7%AF%87%E7%AB%A01/",
      "date"     : "2024-04-15 00:00:00 +0000"
    } 
  
]